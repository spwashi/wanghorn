<?php


namespace WANGHORN\Datatype;


use Sm\Core\Exception\UnimplementedError;
use Sm\Core\Resolvable\Error\UnresolvableException;
use Sm\Data\DataLayer;
use Sm\Data\SmEntity\SmEntityDataManager;
use WANGHORN\Entity\Password\PasswordDatatype;

class DatatypeFactory extends \Sm\Data\Type\DatatypeFactory {
    protected $dataLayer;
    
    /**
     * DatatypeFactory constructor.
     *
     * Introduces dependency on DataLayer
     */
    public function __construct() {
        parent::__construct();
        $self = $this;
        $this->register([
                            function ($smID) use ($self) {
                                $parsed    = SmEntityDataManager::parseSmID($smID);
                                $dataLayer = $self->getDataLayer();
                                if (!isset($dataLayer)) {
                                    throw new UnresolvableException("Cannot resolve $smID without being connected to a datalayer");
                                }
                                if (!$parsed) throw new UnimplementedError("Cannot resolve Datatype '" . $smID . "'");
                                $manager = $dataLayer->getDataManager($parsed['manager'] ?? null);
                                $item    = $manager->instantiate($parsed['name'] ?? null);
                                return $item;
                            },
                        ]);
    }
    public function build($name = null, $schematic = null) {
        if ($name === 'password') return new PasswordDatatype(null);
        return parent::build($name, $schematic); // TODO: Change the autogenerated stub
    }
    protected function getDataLayer(): ?DataLayer {
        return $this->dataLayer;
    }
    public function setDataLayer(DataLayer $dataLayer) {
        $this->dataLayer = $dataLayer;
        return $this;
    }
}